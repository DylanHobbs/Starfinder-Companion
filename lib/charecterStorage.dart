
import 'dart:async';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'charecter.dart';
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;

class CharecterStorage {
  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory();
    return directory.path;
  }

  Future<String> getFileData(String path) async {
    return await rootBundle.loadString(path);
  }

  Future<File> get _localFile async {
    final path = await _localPath;
    final file = File('$path/toon_test_3.json');
    bool exists = file.existsSync();
    if(exists){
      return file;
    } else {
      // Load the default file
      final newfile = await getFileData('toonRepo/data.json');
      return file.writeAsString(newfile);
    }
  }

  Future<Charecter> readCharecter() async {
    try {
      final file = await _localFile;

      // Read the file
      String contents = await file.readAsString();
      Map charecterMap = jsonDecode(contents);
      // Charecter toon = Charecter.fromJson(charecterMap);
      Autogenerated toon = Autogenerated.fromJson(charecterMap);
      Charecter t = toon.charecter;
      return t;
    } catch (e) {
      throw new Exception("There was an error loading your toon");
    }
  }

  Future<File> writeCounter(int counter) async {
    final file = await _localFile;

    // Write the file
    return file.writeAsString('$counter');
  }
}