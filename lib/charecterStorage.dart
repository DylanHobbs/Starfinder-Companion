import 'dart:async';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'charecter.dart';
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;

class CharecterStorage {
  String currentCharecterPath;
  List<String> fileList;

  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory();
    String json_path = directory.path + "/toons";
    return json_path;
  }

  Future<List<Charecter>> readAllCharecters() async {
    final path = await _localPath;
    Directory dir  = Directory(path);
    bool exists = dir.existsSync();
    if(exists == true){
      // Toon dir hasn't been setup yet, make it now.
      new Directory(path).create(recursive: true);

      // Write a default file to the folder
      File defaultToon = File('$path/defaultToon');
      final newfile = await getFileData('toonRepo/data.json');
      defaultToon.writeAsString(newfile);
    } 
    List<FileSystemEntity> _files;
    List<Charecter> toonList = [];
    _files = dir.listSync(recursive: true, followLinks: false);
    for (var file in _files) {
      Charecter toon = await readCharecter(file);
      toonList.add(toon);
    }
    return toonList;
  }

  Future<String> getFileData(String path) async {
    return await rootBundle.loadString(path);
  }

  Future<File> get _localFile async {
    final path = await _localPath;
    final file = File('$path/toon_test_4.json');
    bool exists = file.existsSync();
    if(exists){
      return file;
    } else {
      // Load the default file
      final newfile = await getFileData('toonRepo/data.json');
      return file.writeAsString(newfile);
    }
  }

  Future<Charecter> readCharecter([File file]) async {
    try {
      if(file == null){
        final file = await _localFile;        
      }

      // Read the file
      String contents = await file.readAsString();
      Map charecterMap = jsonDecode(contents);
      // Charecter toon = Charecter.fromJson(charecterMap);
      Autogenerated toon = Autogenerated.fromJson(charecterMap);
      Charecter t = toon.charecter;
      return t;
    } catch (e) {
      throw new Exception("There was an error loading your toon");
    }
  }

  Future<File> writeCounter(int counter) async {
    final file = await _localFile;

    // Write the file
    return file.writeAsString('$counter');
  }

  void updateCurrentCharecter(String path){
    this.currentCharecterPath = path;
  }
}